-- To test how all ASDL construct generate typed code.

module arith {
  use asdl examples demo_lib { value }

  -- Simple Sum Type
  op_id = Plus | Minus | Star

  op_array = (op_id* ops)
  assign = (string name, string* flags)

  -- Compound Sum Type
  cflow =
    Break
  | Continue
  | Return(int status)

  source_location = (string path, int line, int col, int length)

  word = (string value)

  bool_expr =
    Binary(word left, word right)
  | Unary(word child)
  | LogicalNot(bool_expr b)
  | LogicalBinary(op_id op, bool_expr left, bool_expr right)

  Token = (string s, bool b)
  cflow2 = Break | Continue | Return(int status)

  Dicts = (
    Dict[string, string] ss,
    Dict[int, bool] ib,

    -- This has a user-defined type
    Dict[string, Token] tokens,
  )

  flag_type = Bool | Int | Float | Str | Enum(string* alts)

  SetToArg_ = (string name, flag_type flag_type, bool quit_parsing_flags)

  -- Test defaults
  Strings = (string required, string? optional)

  Maybes = (Token? op, word? arg)
}
