# Homogeneous tree for pretty-printing ASDL schemas!
# To avoid bootstrapping problems, it can't be pretty-printed!
# It's generated first with a special flag.

module hnode {

  field = (str name, hnode val)

  color =
    TypeName
  | StringConst
  | OtherConst
  | UserType  # e.g. for Id
  | External

  hnode =
    # null node_type means there's no prefix, e.g. for 'token' type
    Record(str? node_type, List[field] fields,
           bool abbrev, str left, str right, List[hnode] unnamed_fields)
    # TODO: for Dicts, children alternate k1 v1 k2 v2.  Use {}
  | Array(List[hnode] children)
  | Leaf(str s, color color)
    # TODO: get rid of since Id is now in ASDL
  | External(any obj)

  # Idea for bit flags for CreateNull().  NOT part of pretty printing / hnode.
  # We just use a single param alloc_lists=True now

  alloc_members =
    List
  | Dict
  | Struct  # ASDL product or sum types
  generate [bit_set]
  # Could also generate alloc_members_b::{None,All}
  
  # Related:
  # - it would be nice to have ASDL value types (pass by value),
  #   e.g. val[Token] or inline[Token]
  # - we should be able to pack i8, i16, u8, u16, or even bitfields
  #   Point = (int x, int y)
  #   Point = (int[signed, 16] x, int[unsigned, 8] y)
  # It's not i16 and u8 because we recognize C++ implicit int conversions. 
  # This is storage only.
}
