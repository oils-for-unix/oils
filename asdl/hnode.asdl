-- Homogeneous tree for pretty-printing ASDL schemas!
-- To avoid bootstrapping problems, it can't be pretty-printed!
-- It's generated first with a special flag.

module hnode {

  field = (string name, hnode val)

  color =
    TypeName
  | StringConst
  | OtherConst
  | UserType  -- e.g. for Id
  | External

  hnode =
    -- null node_type means there's no prefix, e.g. for 'token' type
    Record(string? node_type, field* fields,
           bool abbrev, string left, string right, hnode* unnamed_fields)
    -- TODO: for maps, children alternate k1 v1 k2 v2.  Use {}
  | Array(hnode* children)
  | Leaf(string s, color color)
    -- TODO: get rid of since Id is now in ASDL
  | External(any obj)

  -- Bit flags for CreateNull().  NOT part of pretty printing / hnode.
  -- We really only need alloc_members_b::List right now, but let's be
  -- consistent.

  -- TODO: put the concrete type of the enum in the schema
  -- state: integers = ...  # state_i::
  -- alloc_members: bits = ... # alloc_members_b::
  --
  -- can also generate alloc_members_b::{None,All}
  --
  -- Related:
  -- * it would be nice to have ASDL value types (pass by value),
  --   e.g. val[Token] or inline[Token]
  -- * we should be able to pack i8, i16, u8, u16, or even bitfields
  --   Point = (int x, int y)
  --   Point = (int[signed, 16] x, int[unsigned, 8] y)
  -- It's not i16 and u8 because we recognize C++ implicit int conversions. 
  -- This is storage only.

  alloc_members =
    List
  | Dict
  | Struct  -- ASDL product or sum types
}
