# Data types used at runtime

module runtime
{
  # import from frontend/syntax.asdl
  use frontend syntax {
    loc Token
    expr word command
    CompoundWord DoubleQuoted
    ArgList re redir_loc proc_sig 
    LiteralBlock Func
  }

  IntBox = (int i)

  # Evaluating SimpleCommand results in either an argv array or an assignment.
  # in 'local foo', rval is None.
  AssignArg = (str var_name, value? rval, bool plus_eq, word blame_word)

  # note: could import 'builtin' from synthetic option_asdl
  cmd_value =
    Argv(List[str] argv, List[CompoundWord] arg_locs,
         ArgList? typed_args,
         # Evaluated args, similar to typed_args.py Reader
         List[value]? pos_args, Dict[str, value]? named_args)

  | Assign(int builtin_id,
           List[str] argv, List[CompoundWord] arg_locs,
           List[AssignArg] pairs)

  ProcDefaults = (
    List[value]? for_word,  # all of them are value.Str
    List[value]? for_typed,  # block default is also here
    Dict[str, value]? for_named,
  )

  # A parse-time word_part from syntax.asdl is evaluated to a runtime
  # part_value.
  part_value = 

    # - Single or double quoted parts get neither split or globbed.
    # - Bare words like echo or *.py are globbed, but NOT split with IFS.
    # - Unquoted Substitutions are split and globbed.
    String(str s, bool quoted, bool do_split)

    # "$@" or "${a[@]}" # never globbed or split (though other shells
    # split them)
  | Array(List[str] strs)
    # only produced when EXTGLOB_FS flag is passed
  | ExtGlob(List[part_value] part_vals)

  coerced = Int | Float | Neither

  # Commands, words, and expressions from syntax.asdl are evaluated to a VALUE.
  # value instances are stored in state.Mem().
  value =
    # A var bound to Undef is different than no binding because of dynamic scope.
    Undef

  | Str(str s)

    # "holes" in the array are represented by None
    # TODO: Use Dict[int, str] representation
  | BashArray(List[str] strs)
  | BashAssoc(Dict[str, str] d)

    # DATA model for YSH follows JSON.  Note: YSH doesn't have 'undefined' and
    # 'null' like JavaScript, just 'null'.
  | Null
  | Bool(bool b)
  | Int(int i)
  | Float(float f)
  | List(List[value] items)
  | Dict(Dict[str, value] d)

  # CODE types
  #   unevaluated: Eggex, Expr, Template, Command/Block
  #   callable, in separate namespaces: Func, BoundFunc, Proc

    # / d+ /
  | Eggex(re expr, str? as_ere)

    # ^[42 + a[i]]
  | Expr(expr e)
    # ^"$1 and $2"
  | Template(DoubleQuoted dq)
    # ^(echo 1; echo 2) and cd { echo 1; echo 2 } 
  | Command(command c)

    # for Hay to get the backing lines
    # TODO: ASDL doesn't support shared variant across module
    # This would be more efficient
  # | LiteralBlock %LiteralBlock
    | Block(LiteralBlock block)

    # callable is vm._Callable.  TODO: ASDL should be able to express and
    # "inline" such types?  Maybe we need a forward declaration of it.
  | BuiltinFunc(any callable)
  | BuiltinMethod(value me, any callable)

    # command.ShFunction and command.Proc evaluate to ProcValue.
    # Procs have default args to evaluate, and no dynamic scope.
  | Proc(str name, Token name_tok, proc_sig sig, command body,
         ProcDefaults? defaults, bool dynamic_scope)

  | Func(str name, Func parsed,
         List[value] pos_defaults, Dict[str, value] named_defaults)

  #
  # Internal details
  #

    # a[3:5] a[:10] a[3:] a[:]  # both ends are optional
  | Slice(IntBox? lower, IntBox? upper)

    # for i in (1:n) { echo $i }  # both ends are required
  | Range(int lower, int upper)


  # What is valid in arrays or assoc arrays a[i] or A[i] in shell.
  # Used for ${a[i]=x}.  TODO: also use for lvalue/place.
  a_index = Str(str s) | Int(int i)

  # for the place in ${a[0]=a}
  VTestPlace = (str? name, a_index? index)

  # evaluation state for BracedVarSub 
  VarSubState = (bool join_array, bool is_type_query)

  # A Cell is a wrapper for a value.
  # TODO: add location for declaration for 'assigning const' error

  # Invariant: if exported or nameref is set, the val should be Str or Undef.
  # This is enforced in mem.SetValue but isn't expressed in the schema.
  Cell = (bool exported, bool readonly, bool nameref, value val)

  # Where scopes are used
  # Parent: for the 'setref' keyword
  # Shopt: to respect shopt -u dynamic_scope.
  #   Dynamic -> LocalOrGlobal for reading
  #   Dynamic -> LocalOnly for writing.
  # Dynamic:
  #   GetValue: Shell Style
  #   SetValue: Shell Style
  # LocalOrGlobal:
  #   GetValue: Oil style
  #   SetValue: N/A
  # LocalOnly:
  #   GetValue: N/A, we can always READ globals
  #   SetValue: setvar, parameter bindings, for loop iterator vars
  # GlobalOnly:
  #   GetValue: N/A
  #   SetValue: internal use in COMPREPLY, and Oil's 'setglobal' keyword

  scope = Parent | Shopt | Dynamic | LocalOrGlobal | LocalOnly | GlobalOnly

  # For OSH assignment, evaluated from osh_ast.lhs_expr
  # TODO: Rename this to sh_place?
  lvalue = 
    Named(str name, loc blame_loc)
  | Indexed(str name, int index, loc blame_loc)
  | Keyed(str name, str key, loc blame_loc)
    # YSH setvar is typed
  | ObjIndex(value obj, value index)

  redirect_arg =
    Path(str filename)
  | CopyFd(int target_fd)
  | MoveFd(int target_fd)  # 3>&1-
  | CloseFd
  | HereDoc(str body)  # call this String and combine with Path?

  # Evaluated version of syntax.Redir
  RedirValue = (id op_id, loc op_loc, redir_loc loc, redirect_arg arg)

  # An exit status with location info.  For process sub.
  StatusArray = (
    List[int]? codes,  # init to null, rarely allocated
    List[loc]? locs    # init to null, rarely allocated
  )

  CommandStatus = (
    # set for atoms
    bool check_errexit,

    # By default, don't show the code on errexit.  Sometimes we want to.
    bool show_code

    # Should we use 'int simple_status' for atoms like atoms like ls  ((  [[ ?

    # for pipeline
    bool pipe_negated,
    List[int]? pipe_status,  # init to null, rarely allocated
    List[loc]? pipe_locs,    # init to null, rarely allocated
  )

  wait_status =
    Proc(int code)
  | Pipeline(List[int] codes)
    # because the 'wait' builtin is interruptible
  | Cancelled(int sig_num)

  flow = Nothing | Break | Raise

  # For word splitting (in frontend/consts.py and osh/split.py)
  span = Black | Delim | Backslash

  emit = Part | Delim | Empty | Escape | Nothing
         generate [integers]
  state = Invalid | Start | DE_White1 | DE_Gray | DE_White2 | Black | Backslash | Done
          generate [integers]

  # Edges are characters.  DE_ is the delimiter prefix.  DE_White is for
  # whitespace; DE_Gray is for other IFS chars; Black is for significant
  # characters.  Sentinel is the end of the string.
  char_kind = DE_White | DE_Gray | Black | Backslash | Sentinel
              generate [integers]

  # core/process.py
  # A Job is a Process or Pipeline.
  # - Processes usually go from Running to Stopped, unless unless Ctrl-Z stops
  #   them.
  # - Pipelines go Running to Done.  They are never stopped; only the processes
  #   inside them are stopped.
  job_state = Running | Done | Stopped

  # Flag arguments can be any of these types.
  flag_type = Bool | Int | Float | Str

  # For dev.Tracer
  trace =
    External(List[str] argv) # sync, needs argv (command.Simple or 'command')
  | CommandSub               # sync
  | ForkWait                 # sync
  | Fork                     # async, needs argv, & fork
  | PipelinePart             # async
  | ProcessSub               # async (other processes can be started)
  | HereDoc                  # async (multiple here docs per process)

  # tools/ysh_ify.py
  word_style = Expr | Unquoted | DQ | SQ

  # Hay "first word" namespace
  HayNode = (Dict[str, HayNode] children)

  comp_action = Other | FileSystem | BashFunc
}

# vim: sw=2
