# Types that don't depend on Id.  (To break dependency)

module types {
  bool_arg_type = Undefined | Path | Int | Str | Other
  redir_arg_type = Path | Desc

  opt_group = StrictAll | YshUpgrade | YshAll
              generate [integers]

  # Fifteen lexer modes for OSH

  lex_mode =
    Undefined
  | Comment

    # ShCommandFakeBrack (no regex list) is for lazy arg list []
  | ShCommand | ShCommandFakeBrack

  | Backtick  # preprocessing before Outer
  | DBracket

  | SQ_Raw | DQ | SQ_C | J8_Str

  | Arith
  | ExtGlob
  | VSub_1 | VSub_2 | VSub_ArgUnquoted | VSub_ArgDQ | VSub_Zsh

    # BashRegexFakeInner (no regex list) is for parens in patterns
    #   [[ s =~ (< >) ]]
    # the WordParser does a translation from BashRegex
  | BashRegex | BashRegexFakeInner

  | FuncParens  # for Id.LookAhead_FuncParens

  # Two for printf builtin
  | PrintfOuter | PrintfPercent

  # YSH/eggex both use Expr
  | Expr      # var x = 1 + 2 * 3; echo $f(a, b + 1)

  # Unused.  TODO: consider this representation
  word_mode =
    ShCommand  # These three correspond to lex_mode
  | ShCommandBrack # for lazy arg list assert [42 === x]

  | DBracket 
  | BashRegex


  # More possibilities
  # - printf formatting ${x %05d}.  I think that is mostly in expression mode
  #   like ${x|html} or ${x|title}

  # CommandParser context
  # Note: cmd_mode_e.Hay is better done with CommandParser.hay_attrs_stack,
  # which is nested
  cmd_mode =
    Shell   # Top level, and inside shell-style functions
  | Func    # Inside a func,  return (x) is required
  | Proc    # Inside proc { } -- shell assignments are disallowed
}
