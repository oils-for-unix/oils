# Grammar for YSH.
# Adapted from the Python 3.7 expression grammar, with several changes!
# 
# TODO:
# - List comprehensions
#   - There's also chaining => and maybe implicit vectorization ==>
#   - But list comprehensions are more familiar, and they are concise
# - Generator expressions?
# - Do we need lambdas?

# Note: trailing commas are allowed:
#   {k: mydict,}
#   [mylist,]
#   mytuple,
#   f(args,)
#   func f(params,)
# 
# Kinds used:
#   VSub, Left, Right, Expr, Op, Arith, Char, Eof, Unknown

# YSH patch: removed @=
augassign: (
    '+=' | '-=' | '*=' | '/=' |
    '**=' | '//=' | '%=' |
    '&=' | '|=' | '^=' | '<<=' | '>>='
)

test: or_test ['if' or_test 'else' test] | lambdef

# Lambdas follow the same rules as Python:
#
# |x| 1, 2                ==    (|x| 1), 2
# |x| x if True else 42   ==    |x| (x if True else 42)
#
# Python also had a test_nocond production like this:  We don't need it because
# we can't have multiple ifs.
# [x for x in range(3) if lambda x: x if 1]
# 
# The zero arg syntax like || 1  annoys me -- but this also works:
# func() { return 1 }
# 
# We used name_type_list rather than param_group because a default value like
# x|y (bitwise or) conflicts with the | delimiter!
#
# TODO: consider this syntax:
# fn (x) x            # expression
# fn (x) ^( echo hi ) # statement

lambdef: '|' [name_type_list] '|' test

or_test: and_test ('or' and_test)*
and_test: not_test ('and' not_test)*
not_test: 'not' not_test | comparison
comparison: range_expr (comp_op range_expr)*

# Unlike slice, beginning and end are required
range_expr: expr ['..' expr]

# YSH patch: remove legacy <>, add === and more
comp_op: (
    '<'|'>'|'==='|'>='|'<='|'!=='|'in'|'not' 'in'|'is'|'is' 'not'|
    '~' | '!~' | '~~' | '!~~' | '~=='
)

# For lists and dicts.  Note: In Python this was star_expr *foo
splat_expr: '...' expr

expr: xor_expr ('|' xor_expr)*
xor_expr: and_expr ('^' and_expr)*
and_expr: shift_expr ('&' shift_expr)*
shift_expr: arith_expr (('<<'|'>>') arith_expr)*
# YSH: add concatenation ++ with same precedence as +
arith_expr: term (('+'|'-'|'++') term)*
# YSH: removed '@' matrix mul
term: factor (('*'|'/'|'//'|'%') factor)*
factor: ('+'|'-'|'~') factor | power
# YSH: removed Python 3 'await'
power: atom trailer* ['**' factor]

testlist_comp: (test|splat_expr) ( comp_for | (',' (test|splat_expr))* [','] )

atom: (
    '(' [testlist_comp] ')' 
  | '[' [testlist_comp] ']' 
    # Note: newlines are significant inside {}, unlike inside () and []
  | '{' [Op_Newline] [dict] '}'
  | '&' Expr_Name place_trailer*

    # NOTE: These atoms are are allowed in typed array literals
  | Expr_Name | Expr_Null | Expr_True | Expr_False 

    # Allow suffixes on floats and decimals
    # e.g. 100 M is a function M which multiplies by 1_000_000
    # e.g. 100 Mi is a function Mi which multiplies by 1024 * 1024
  | Expr_Float [Expr_Name]
  | Expr_DecInt [Expr_Name]

  | Expr_BinInt | Expr_OctInt | Expr_HexInt 

  | Char_OneChar  # char literal \n \\ etc.
  | Char_UBraced  # char literal \u{3bc}
  | Char_Pound    # char literal #'A' etc.

  | dq_string | sq_string
    # Expr_Symbol could be %mykey

  | eggex
  | literal_expr

  # $foo is disallowed, but $? is allowed.  Should be "$foo" to indicate a
  # string, or ${foo:-}
  | simple_var_sub
  | sh_command_sub | braced_var_sub
  | sh_array_literal
  | old_sh_array_literal
)

literal_expr: '^[' expr ']'

place_trailer: (
    '[' subscriptlist ']'
  | '.' Expr_Name
)

# var f = f(x)
trailer: (
    '(' [arglist] ')'
  | '[' subscriptlist ']'

  # Is a {} trailing useful for anything?  It's not in Python or JS

  | '.' Expr_Name
  | '->' Expr_Name
  | '=>' Expr_Name
)

# YSH patch: this is 'expr' instead of 'test'
# - 1:(3<4) doesn't make any sense.
# - And then this allows us to support a[3:] and a[:i] as special cases.
# - First class slices have to be written 0:n.

subscriptlist: subscript (',' subscript)* [',']

# TODO: Add => as low precedence operator, for Func[Str, Int => Str]
subscript: expr | [expr] ':' [expr]

# TODO: => should be even lower precedence here too
testlist: test (',' test)* [',']

# Dict syntax resembles JavaScript
# https://stackoverflow.com/questions/38948306/what-is-javascript-shorthand-property
#
# Examples:
# {age: 20} is like {'age': 20}
# 
# x = 'age'
# d = %{[x]: 20}  # Evaluate x as a variable
# d = %{["foo$x"]: 20}  # Another expression
# d = %{[x, y]: 20}  # Tuple key
# d = %{key1, key1: 123}
# Notes:
# - Value is optional when the key is a name, because it can be taken from the
# environment.
# - We don't have:
#   - dict comprehensions.  Maybe wait until LR parsing?
#   - Splatting with **

dict_pair: (
    Expr_Name [':' test] 
  | '[' testlist ']' ':' test 
  | sq_string ':' test 
  | dq_string ':' test
)

comma_newline: ',' [Op_Newline] | Op_Newline

dict: dict_pair (comma_newline dict_pair)* [comma_newline]

# This how Python implemented dict comprehensions.  We can probably do the
# same.
#
# dictorsetmaker: ( ((test ':' test | '**' expr)
#                    (comp_for | (',' (test ':' test | '**' expr))* [','])) |
#                   ((test | splat_expr)
#                    (comp_for | (',' (test | splat_expr))* [','])) )

# The reason that keywords are test nodes instead of NAME is that using NAME
# results in an ambiguity. ast.c makes sure it's a NAME.
# "test '=' test" is really "keyword '=' test", but we have no such token.
# These need to be in a single rule to avoid grammar that is ambiguous
# to our LL(1) parser. Even though 'test' includes '*expr' in splat_expr,
# we explicitly match '*' here, too, to give it proper precedence.
# Illegal combinations and orderings are blocked in ast.c:
# multiple (test comp_for) arguments are blocked; keyword unpackings
# that precede iterable unpackings are blocked; etc.

argument: (
    test [comp_for]
    # named arg
  | test '=' test
    # splat.  Note we're using prefix syntax to be consistent with Python, JS,
    # and the prefix @ operator.
  | '...' test
)

# The grammar at call sites is less restrictive than at declaration sites.
# ... can appear anywhere.  Keyword args can appear anywhere too.
arg_group: argument (',' argument)* [',']
arglist: [arg_group] [';' arg_group]


# YSH patch: test_nocond -> or_test.  I believe this was trying to prevent the
# "double if" ambiguity here:
# #
# [x for x in range(3) if lambda x: x if 1]
# 
# but YSH doesn't supported "nested loops", so we don't have this problem.
comp_for: 'for' name_type_list 'in' or_test ['if' or_test]


#
# Expressions that are New in YSH
#

# Notes:
# - Most of these occur in 'atom' above
# - You can write $mystr but not mystr.  It has to be (mystr)
array_item: (
   Expr_Null | Expr_True | Expr_False 
 | Expr_Float | Expr_DecInt | Expr_BinInt | Expr_OctInt | Expr_HexInt
 | dq_string | sq_string
 | sh_command_sub | braced_var_sub | simple_var_sub
 | '(' test ')'
)
sh_array_literal: ':|' Expr_CastedDummy Op_Pipe

# TODO: remove old array
old_sh_array_literal: '%(' Expr_CastedDummy Right_ShArrayLiteral
sh_command_sub: ( '$(' | '@(' | '^(' ) Expr_CastedDummy Eof_RParen

# Note: could add c"" too
dq_string: (Left_DoubleQuote | Left_TDoubleQuote | Left_CaretDoubleQuote) Expr_CastedDummy Right_DoubleQuote
sq_string: (
    Left_SingleQuote | Left_TSingleQuote 
  | Left_RSingleQuote | Left_RTSingleQuote
  | Left_DollarSingleQuote
  | Left_USingleQuote | Left_UTSingleQuote 
  | Left_BSingleQuote | Left_BTSingleQuote
) Expr_CastedDummy Right_SingleQuote

braced_var_sub: '${' Expr_CastedDummy Right_DollarBrace

simple_var_sub: (
  # This is everything in Kind.VSub except VSub_Name, which is braced: ${foo}
  #
  # Note: we could allow $foo and $0, but disallow the rest in favor of ${@}
  # and ${-}?  Meh it's too inconsistent.
    VSub_DollarName | VSub_Number
  | VSub_Bang | VSub_At | VSub_Pound | VSub_Dollar | VSub_Star | VSub_Hyphen
  | VSub_QMark 
  # NOTE: $? should be STATUS because it's an integer.
)

#
# Assignment / Type Variables
#
# Several differences vs. Python:
#
# - no yield expression on RHS
# - no star expressions on either side (Python 3)    *x, y = 2, *b
# - no multiple assignments like: var x = y = 3
# - type annotation syntax is more restrictive    # a: (1+2) = 3 is OK in python
# - We're validating the lvalue here, instead of doing it in the "transformer".
#   We have the 'var' prefix which helps.

# name_type use cases:
#   var x Int, y Int = 3, 5
#   / <capture d+ as date: int> /
#
#   for x Int, y Int
#   [x for x Int, y Int in ...]
#
#   func(x Int, y Int) - this is separate

# Optional colon because we want both

#   var x: Int = 42                             # colon looks nicer
#   proc p (; x Int, y Int; z Int) { echo hi }  # colon gets in the way of ;

name_type: Expr_Name [':'] [type_expr]
name_type_list: name_type (',' name_type)*

type_expr: Expr_Name [ '[' type_expr (',' type_expr)* ']' ]

# NOTE: Eof_RParen and Eof_Backtick aren't allowed because we don't want 'var'
# in command subs.
end_stmt: '}' | ';' | Op_Newline | Eof_Real 

# TODO: allow -> to denote aliasing/mutation
ysh_var_decl: name_type_list ['=' testlist] end_stmt

# Note: this is more precise way of writing ysh_mutation, but it's ambiguous :(
# ysh_mutation: lhs augassign testlist end_stmt
#             | lhs_list '=' testlist end_stmt

# Note: for YSH (not Tea), we could accept [':'] expr for setvar :out = 'foo'
lhs_list: expr (',' expr)*

# TODO: allow -> to denote aliasing/mutation
ysh_mutation: lhs_list (augassign | '=') testlist end_stmt

# For json write (x)
ysh_eager_arglist: '(' [arglist] ')'
ysh_lazy_arglist: '[' [arglist] ']'

#
# Other Entry Points
#

# if (x > 0) etc.
ysh_expr: '(' testlist ')'

#    = 42 + a[i]
# call f(x)
command_expr: testlist end_stmt

# $[d->key] etc.
ysh_expr_sub: testlist ']'

# Signatures for proc and func.

# Note: 'proc name-with-hyphens' is allowed, so we can't parse the name in
# expression mode.
ysh_proc: (
  [ '(' 
          [ param_group ]    # word params, with defaults
    [ ';' [ param_group ] ]  # positional typed params, with defaults
    [ ';' [ param_group ] ]  # named params, with defaults
    [ ';' [ param_group ] ]  # optional block param, with no type or default

    # This causes a pgen2 error?  It doesn't know which branch to take
    # So we have the extra {block} syntax
    #[ ';' Expr_Name ]        # optional block param, with no type or default
    ')'  
  ]
  '{'  # opening { for pgen2
)

ysh_func: (
    Expr_Name '(' [param_group] [';' param_group] ')' ['=>' type_expr] '{'
)

param: Expr_Name [type_expr] ['=' expr]

# This is an awkward way of writing that '...' has to come last.
param_group: (
   (param ',')*
   [ (param | '...' Expr_Name) [','] ]
)

#
# Regex Sublanguage
#

char_literal: Char_OneChar | Char_Hex | Char_UBraced

# we allow a-z A-Z 0-9 as ranges, but otherwise they have to be quoted
# The parser enforces that they are single strings
range_char: Expr_Name | Expr_DecInt | sq_string | char_literal

# digit or a-z
# We have to do further validation of ranges later.
class_literal_term: (
    # NOTE: range_char has sq_string
    range_char ['-' range_char ]
    # splice a literal set of characters
  | '@' Expr_Name
  | '!' Expr_Name
    # Reserved for [[.collating sequences.]] (Unicode)
  | '.' Expr_Name
    # Reserved for [[=character equivalents=]] (Unicode)
  | '=' Expr_Name
    # TODO: Do these char classes actually work in bash/awk/egrep/sed/etc.?

)
class_literal: '[' class_literal_term+ ']'

# NOTE: Here is an example of where you can put ^ in the middle of a pattern in
# Python, and it matters!
# >>> r = re.compile('.f[a-z]*', re.DOTALL|re.MULTILINE)
# >>> r.findall('z\nfoo\nbeef\nfood\n')
# ['\nfoo', 'ef', '\nfood']
# >>> r = re.compile('.^f[a-z]*', re.DOTALL|re.MULTILINE)
# r.findall('z\nfoo\nbeef\nfood\n')
# ['\nfoo', '\nfood']

re_atom: (
    char_literal
    # builtin regex like 'digit' or a regex reference like 'D'
  | Expr_Name
    # %begin or %end
  | Expr_Symbol
  | class_literal
    # !digit or ![a-f].  Note ! %boundary could be \B in Python, but ERE
    # doesn't have anything like that
  | '!' (Expr_Name | class_literal)

    # syntactic space for Perl-style backtracking
    # !!REF 1   !!REF name
    # !!AHEAD(d+)   !!BEHIND(d+)  !!NOT_AHEAD(d+)  !!NOT_BEHIND(d+)
    #
    # Note: !! conflicts with history
  | '!' '!' Expr_Name (Expr_Name | Expr_DecInt | '(' regex ')')

    # Splice another expression
  | '@' Expr_Name
    # any %start %end are preferred
  | '.' | '^' | '$'
    # In a language-independent spec, backslashes are disallowed within 'sq'.
    # Write it with char literals outside strings: 'foo' \\ 'bar' \n
    # 
    # No double-quoted strings because you can write "x = $x" with 'x = ' @x
  | sq_string

    # grouping (non-capturing in Perl; capturing in ERE although < > is preferred)
  | '(' regex ')'

    # Capturing group, with optional name and conversion function
    #   <capture d+ as date>
    #   <capture d+ as date: int>
    #   <capture d+ : int>
  | '<' 'capture' regex ['as' Expr_Name] [':' Expr_Name] '>'

    # Might want this obscure conditional construct.  Can't use C-style ternary
    # because '?' is a regex operator.
  #| '{' regex 'if' regex 'else' regex '}'

  # Others:
  # PCRE has (?R ) for recursion?  That could be !RECURSE()
  # Note: .NET has && in character classes, making it a recursive language
)

# e.g.   a{3}   a{3,4}  a{3,}   a{,4} but not a{,}
repeat_range: (
    Expr_DecInt [',']
  | ',' Expr_DecInt
  | Expr_DecInt ',' Expr_DecInt
)

repeat_op: (
    '+' | '*' | '?' 
  # In PCRE, ?? *? +? {}? is lazy/nongreedy and ?+ *+ ++ {}+ is "possessive"
  # We use N and P modifiers within {}.
  # a{L +}  a{P ?}  a{P 3,4}  a{P ,4}
  | '{' [Expr_Name] ('+' | '*' | '?' | repeat_range) '}'
)

re_alt: (re_atom [repeat_op])+

regex: [re_alt] (('|'|'or') re_alt)*

# e.g. /digit+ ; multiline !ignorecase/
#
# This can express translation preferences:
#
# / d+ ; ; ERE /                is   '[[:digit:]]+'
# / d+ ; ; PCRE /               is   '\d+'
# / d+ ; ignorecase ; python /  is   '(?i)\d+'

# Python has the syntax
#    (?i:myre)  to set a flag
#    (?-i:myre) to remove a flag
#
# They can apply to portions of the expression, which we don't have here.
re_flag: ['!'] Expr_Name
eggex: '/' regex [';' re_flag* [';' Expr_Name] ] '/'

# Patterns are the start of a case arm. Ie,
#
# case (foo) {
#   (40 + 2) | (0) { echo number }
#   ^^^^^^^^^^^^^^-- This is pattern
# }
#
# Due to limitations created from pgen2/cmd_parser interactions, we also parse
# the leading '{' token of the case arm body in pgen2. We do this to help pgen2
# figure out when to transfer control back to the cmd_parser. For more details
# see #oil-dev > Dev Friction / Smells.
#
# case (foo) {
#   (40 + 2) | (0) { echo number }
#                  ^-- End of pattern/beginning of case arm body
# }

ysh_case_pat: (
    '(' (pat_else | pat_exprs)
  | eggex
) [Op_Newline] '{'

pat_else: 'else' ')'
pat_exprs: expr ')' [Op_Newline] ('|' [Op_Newline] '(' expr ')' [Op_Newline])*


# Syntax reserved for PCRE/Python, but that's not in ERE:
# 
#   non-greedy     a{N *}
#   non-capturing  ( digit+ )
#   backtracking   !!REF 1  !!AHEAD(d+)
# 
# Legacy syntax:
# 
#   ^ and $ instead of %start and %end
#   < and > instead of %start_word and %end_word
#   . instead of dot
#   | instead of 'or'
