### Pretty Printing Unit Tests

# This is a set of unit tests for pretty printing.
#
# Each test case has three parts: a printing `Width`, an `Input` value string,
# and an `Expect`ed result. It ensures that:
#
#     PrettyPrinter.PrintValue(width, j8.Parser.ParseValue(value)) == expected

# Vim syntax highlighting:
#     syn match section "#.*$"
#     syn keyword kw Input Expect Width
#     syn match punct '^>'
#     syn match punct ' >'
#     hi def link section Comment
#     hi def link punct   Delimiter
#     hi def link kw      Keyword
# (Place in ~/.config/nvim/syntax/pretty_tests.vim,
#  then enable with :set syntax=pretty_tests)

## Primitives

Width  > 10

Input  > null
Expect > null

Input  > true
Expect > true

Input  > false
Expect > false

Input  > 0
Expect > 0

Input  > -123
Expect > -123

Input  > 123456789123456789123456789
Expect > 123456789123456789123456789

Input  > 0.0
Expect > 0.0

Input  > 1.00
Expect > 1.0

Input  > -0.000
Expect > -0.0

Input  > 2.99792458e8
Expect > 299792458.0

Input  >   "hello"
Expect > "hello"

Input  > "\"For the `n`'th time,\" she said."
Expect > "\"For the `n`'th time,\" she said."

## Lists

Width  > 20
Input  > []
Expect > []

Input  > [100, 200, 300]

Width  > 20
Expect > [100, 200, 300]

Width  > 12
Expect
> [
>     100,
>     200, 300
> ]

Width  > 10
Expect
> [
>     100,
>     200,
>     300
> ]

Input  > [[100, 200, 300], [100, 200, 300]]

Width  > 20
Expect
> [
>     [100, 200, 300],
>     [100, 200, 300]
> ]

Width  > 19
Expect
> [
>     [
>         100, 200,
>         300
>     ],
>     [100, 200, 300]
> ]

Width  > 11
Expect
> [
>     [
>         100,
>         200,
>         300
>     ],
>     [
>         100,
>         200,
>         300
>     ]
> ]

## Dictionaries

Width  > 10
Input  > {}
Expect > {}

Input  > {"x":100, "y":200, "z":300}

Width  > 24
Expect > {x: 100, y: 200, z: 300}

Width  > 23
Expect
> {
>     x: 100,
>     y: 200,
>     z: 300
> }

Input
> {
>     "letters": {"1": "A", "2": "B", "3": "C"},
>     "numbers": {"1": "one", "2": "two", "3": "three"}
> }

Width > 51
Expect
> {
>     letters: {"1": "A", "2": "B", "3": "C"},
>     numbers: {"1": "one", "2": "two", "3": "three"}
> }

Width > 44
Expect
> {
>     letters: {"1": "A", "2": "B", "3": "C"},
>     numbers: {
>         "1": "one",
>         "2": "two",
>         "3": "three"
>     }
> }

Width > 43
Expect
> {
>     letters: {
>         "1": "A",
>         "2": "B",
>         "3": "C"
>     },
>     numbers: {
>         "1": "one",
>         "2": "two",
>         "3": "three"
>     }
> }

## Full width characters

Input  > ["世界", "您好"]

Width  > 16
Expect > ["世界", "您好"]

Width  > 15
Expect
> [
>     "世界",
>     "您好"
> ]

## Tabular alignment

Input  > ["aaaaaaa", "bbb", "ccccc"]

Width  > 27
Expect > ["aaaaaaa", "bbb", "ccccc"]

Width > 26
Expect
> [
>     "aaaaaaa", "bbb",
>     "ccccc"
> ]

Width > 21
Expect
> [
>     "aaaaaaa", "bbb",
>     "ccccc"
> ]

Width > 20
Expect
> [
>     "aaaaaaa",
>     "bbb",
>     "ccccc"
> ]

Input  > ["aaa", "bbbbbbb", "ccccc"]

Width  > 27
Expect > ["aaa", "bbbbbbb", "ccccc"]

Width  > 26
Expect
> [
>     "aaa",     "bbbbbbb",
>     "ccccc"
> ]

Input  > ["aaaaa", "bbbbbbb", "ccc"]

Width  > 27
Expect > ["aaaaa", "bbbbbbb", "ccc"]

Width  > 26
Expect
> [
>     "aaaaa",   "bbbbbbb",
>     "ccc"
> ]

Input  > { "simple_primitives": [null, false, true] }
Width  > 30
Expect
> {
>     simple_primitives: [
>         null, false, true
>     ]
> }

# elements are too big for tabular alignment
Input > ["aaaaaaaaaaaaaaaaaaa", "bbbbbbbbbbbbbbbbbbbbb", "cccccccccccccccccccc"]
Width > 30
Expect
> [
>     "aaaaaaaaaaaaaaaaaaa",
>     "bbbbbbbbbbbbbbbbbbbbb",
>     "cccccccccccccccccccc"
> ]

# Last element in tabular alignment wants to split across multiple lines,
# but should not.
Input > ["aaaaaaa", "bbbbbbb", "ccccccc", {"d": "k"}]
Width > 40
Expect
> [
>     "aaaaaaa", "bbbbbbb", "ccccccc",
>     {d: "k"}
> ]


## Everything at once

Input
> {
>     'primitives': {
>         'simple_primitives': [null, false, true],
>         'numeric_primitives': [-123456789, 123.456789],
>         'stringy_primitives': 'string'
>     },
>     'compounds': [
>         [1, 2, 3],
>         {'dict': 'ionary'}
>     ],
>     'variety-pack': [
>         null,
>         ['Los', 'pollitos', 'dicen', 'pío', 'pío', 'pío'],
>         [1, [2, [3, [4, [5, [6]]]]]],
>         [[[[[5], 4], 3], 2], 1]
>     ]
> }

Width > 58
Expect
> {
>     primitives: {
>         simple_primitives: [null, false, true],
>         numeric_primitives: [-123456789, 123.456789],
>         stringy_primitives: "string"
>     },
>     compounds: [[1, 2, 3], {dict: "ionary"}],
>     "variety-pack": [
>         null,
>         ["Los", "pollitos", "dicen", "pío", "pío", "pío"],
>         [1, [2, [3, [4, [5, [6]]]]]],
>         [[[[[5], 4], 3], 2], 1]
>     ]
> }

Width > 53
Expect
> {
>     primitives: {
>         simple_primitives: [null, false, true],
>         numeric_primitives: [-123456789, 123.456789],
>         stringy_primitives: "string"
>     },
>     compounds: [[1, 2, 3], {dict: "ionary"}],
>     "variety-pack": [
>         null,
>         [
>             "Los",      "pollitos", "dicen",
>             "pío",      "pío",      "pío"
>         ],
>         [1, [2, [3, [4, [5, [6]]]]]],
>         [[[[[5], 4], 3], 2], 1]
>     ]
> }

Width > 47
Expect
> {
>     primitives: {
>         simple_primitives: [null, false, true],
>         numeric_primitives: [
>             -123456789, 123.456789
>         ],
>         stringy_primitives: "string"
>     },
>     compounds: [[1, 2, 3], {dict: "ionary"}],
>     "variety-pack": [
>         null,
>         [
>             "Los",      "pollitos", "dicen",
>             "pío",      "pío",      "pío"
>         ],
>         [1, [2, [3, [4, [5, [6]]]]]],
>         [[[[[5], 4], 3], 2], 1]
>     ]
> }

Width > 37
Expect
> {
>     primitives: {
>         simple_primitives: [
>             null, false, true
>         ],
>         numeric_primitives: [
>             -123456789, 123.456789
>         ],
>         stringy_primitives: "string"
>     },
>     compounds: [
>         [1, 2, 3], {dict: "ionary"}
>     ],
>     "variety-pack": [
>         null,
>         [
>             "Los",      "pollitos",
>             "dicen",    "pío",
>             "pío",      "pío"
>         ],
>         [1, [2, [3, [4, [5, [6]]]]]],
>         [[[[[5], 4], 3], 2], 1]
>     ]
> }

Width > 36
Expect
> {
>     primitives: {
>         simple_primitives: [
>             null, false, true
>         ],
>         numeric_primitives: [
>             -123456789, 123.456789
>         ],
>         stringy_primitives: "string"
>     },
>     compounds: [
>         [1, 2, 3], {dict: "ionary"}
>     ],
>     "variety-pack": [
>         null,
>         [
>             "Los",      "pollitos",
>             "dicen",    "pío",
>             "pío",      "pío"
>         ],
>         [
>             1,
>             [2, [3, [4, [5, [6]]]]]
>         ],
>         [[[[[5], 4], 3], 2], 1]
>     ]
> }

Width > 30
Expect
> {
>     primitives: {
>         simple_primitives: [
>             null, false, true
>         ],
>         numeric_primitives: [
>             -123456789,
>             123.456789
>         ],
>         stringy_primitives: "string"
>     },
>     compounds: [
>         [1, 2, 3],
>         {dict: "ionary"}
>     ],
>     "variety-pack": [
>         null,
>         [
>             "Los",
>             "pollitos",
>             "dicen",    "pío",
>             "pío",      "pío"
>         ],
>         [
>             1,
>             [
>                 2,
>                 [
>                     3,
>                     [
>                         4,
>                         [
>                             5,
>                             [
>                                 6
>                             ]
>                         ]
>                     ]
>                 ]
>             ]
>         ],
>         [
>             [
>                 [[[5], 4], 3],
>                 2
>             ], 1
>         ]
>     ]
> }
