#!/usr/bin/env bash
#
# Usage:
#   ./spec-compat-html.sh <function name>

: ${LIB_OSH=stdlib/osh}
source $LIB_OSH/bash-strict.sh
source $LIB_OSH/task-five.sh

REPO_ROOT=$(cd "$(dirname $0)/.."; pwd)

source benchmarks/common.sh  # cmark function.  TODO: could use executable
source test/common.sh
source test/spec-common.sh
source test/tsv-lib.sh  # tsv-row
source web/table/html.sh  # table-sort-begin

# Matches SHELLS
readonly -a SH_LABELS=(bash mksh ksh toysh sush brush osh)

summary-tsv-row() {
  ### Print one row or the last total row

  local report=$1
  local spec_subdir=$2
  shift 2

  if test $# -eq 1; then
    local spec_name=$1
    local -a tsv_files=( _tmp/spec/$spec_subdir/$spec_name.result.tsv )
  else
    local spec_name='TOTAL'
    local -a tsv_files=( "$@" )
  fi

  awk -v report=$report -v spec_name=$spec_name '
# skip the first row
FNR != 1 {
  case_num = $1
  sh = $2
  result = $3

  if (sh == "bash") {
    bash[result] += 1
  } else if (sh == "mksh") {
    mksh[result] += 1
  } else if (sh == "ksh") {
    ksh[result] += 1
  } else if (sh == "toysh") {
    toysh[result] += 1
  } else if (sh == "sush") {
    sush[result] += 1
  } else if (sh == "brush") {
    brush[result] += 1
  } else if (sh == "osh") {
    osh[result] += 1
  }
}

END { 
  if (spec_name == "TOTAL") {
    href = ""
  } else {
    href = sprintf("%s.html", spec_name)
  }

  if (report == "PASSING") {
    bash_total = ("pass" in bash) ? bash["pass"] : 0
    mksh_total = ("pass" in mksh) ? mksh["pass"] : 0
    ksh_total = ("pass" in ksh) ? ksh["pass"] : 0
    toysh_total = ("pass" in toysh) ? toysh["pass"] : 0
    sush_total = ("pass" in sush) ? sush["pass"] : 0
    brush_total = ("pass" in brush) ? brush["pass"] : 0
    osh_total = ("pass" in osh) ? osh["pass"] : 0

  } else if (report == "DELTA-osh") {
    bash_total = bash["pass"] - osh["pass"]
    mksh_total = mksh["pass"] - osh["pass"]
    ksh_total = ksh["pass"] - osh["pass"]
    toysh_total = toysh["pass"] - osh["pass"]
    sush_total = sush["pass"] - osh["pass"]
    brush_total = brush["pass"] - osh["pass"]
    osh_total = osh["pass"] - osh["pass"]

  } else if (report == "DELTA-bash") {
    bash_total = bash["pass"] - bash["pass"]
    mksh_total = mksh["pass"] - bash["pass"]
    ksh_total = ksh["pass"] - bash["pass"]
    toysh_total = toysh["pass"] - bash["pass"]
    sush_total = sush["pass"] - bash["pass"]
    brush_total = brush["pass"] - bash["pass"]
    osh_total = osh["pass"] - bash["pass"]
  }

  # TODO: change this color
  row_css_class = "cpp-good"  # green

  row = sprintf("%s %s %s %d %d %d %d %d %d %d",
         row_css_class,
         spec_name, href,
         bash_total,
         mksh_total,
         ksh_total,
         toysh_total,
         sush_total,
         brush_total,
         osh_total)

  # Turn tabs into spaces - awk mutates the row!
  gsub(/ /, "\t", row)
  print row
}
' "${tsv_files[@]}"
}

summary-tsv() {
  local report=$1
  local spec_subdir=$2

  local manifest=_tmp/spec/SUITE-osh.txt

  # Can't go at the top level because files might not exist!
  tsv-row \
    'ROW_CSS_CLASS' 'name' 'name_HREF' "${SH_LABELS[@]}"

  # total row rows goes at the TOP, so it's in <thead> and not sorted.
  summary-tsv-row $report $spec_subdir _tmp/spec/$spec_subdir/*.result.tsv

  head -n $NUM_SPEC_TASKS $manifest | sort |
  while read spec_name; do
    summary-tsv-row $report $spec_subdir $spec_name
  done 
}

html-summary-header() {
  local report=$1

  local prefix=../../..
  spec-html-head $prefix "$report - Shell Compatibility "

  table-sort-begin "width50"

  cat <<EOF
<p id="home-link">
  <!-- The release index is two dirs up -->
  <a href="../..">Up</a> |
  <a href="/">oils.pub</a>
</p>

<h1>$report - Shell Compatibility</h1>

<p>Back to <a href="TOP.html">TOP.html</a>.
</p>
EOF
}

html-summary-footer() {
  local report=$1

  echo "
<p>Generated by <code>test/spec-compat.sh</code>.
</p>

<p><a href="$report.tsv">Raw TSV</a>
</p>
"
  table-sort-end "$report"  # The table name
}

write-summary-html() {
  local report=$1
  local spec_subdir=$2

  local dir=_tmp/spec/$spec_subdir
  local out=$dir/$report.html

  summary-tsv $report $spec_subdir >$dir/$report.tsv 

  # The underscores are stripped when we don't want them to be!
  # Note: we could also put "pretty_heading" in the schema

  here-schema-tsv >$dir/$report.schema.tsv <<EOF
column_name     type
ROW_CSS_CLASS   string
name            string
name_HREF       string
bash            integer
mksh            integer
ksh             integer
toysh           integer
sush            integer
brush           integer
osh             integer
EOF

  { html-summary-header "$report"
    # total row isn't sorted
    tsv2html --thead-offset 1 $dir/$report.tsv
    html-summary-footer "$report"
  } > $out

  log "Comparison: file://$REPO_ROOT/$out"
}

top-html() {
  local base_url='../../../web'
  html-head --title 'Shell Compatibility Reports' \
    "$base_url/base.css"

  echo '
  <body class="width35">
    <p id="home-link">
      <a href="/">oils.pub</a>
    </p>
  '

  cmark <<'EOF'
## Shell Compatibility Reports

Based on the Oils test suite.

Here are 3 different summary tables.  **Click** on the column headers to sort:

- [Total Passing](PASSING.html)
  - Each shell gets 1 point for each case we marked passing.  Our assertions
    are based on a **survey** of `bash`, `dash`, `mksh`, `zsh`, and other shells.
- [Delta bash](DELTA-bash.html)
  - Compare each shell's passing number vs. bash
- [Delta OSH](DELTA-osh.html)
  - Compare each shell's passing number vs. OSH

### Notes

- There's some bias toward OSH, because OSH has some features that bash doesn't
  have.
  - e.g. `spec/strict-options` and `spec/errexit-osh`
  - We could make a pretty neutral report by using a "majority agreement"
    metric.  We would need to enhance `test/sh_spec.py`.
- We could also add the Smoosh test suite, which is published on our [quality
page](https://oils.pub/release/latest/quality.html).
- There may be tests that fail for trivial reasons
  - Shell authors are welcome to use our test suite, and add assertions.

### Links

- Wiki:
  - [Contributing](https://github.com/oils-for-unix/oils/wiki/Contributing)
  - [Spec Tests](https://github.com/oils-for-unix/oils/wiki/Spec-Tests)
- <https://oilshell.zulipchat.com/>

EOF

  echo '
  </body>
</html>
'

# Notes on big files:
# - spec/strict-options, errexit-osh - could be in the YSH suite
#   - but then that messes up our historical metrics
#   - or we create a new 'spec-compat' suite?
# - spec/globignore - a big one for OSH

}

write-compare-html() {
  local dir=_tmp/spec/spec-compat

  local out=$dir/TOP.html 
  top-html >$out
  log "Top-level index: file://$REPO_ROOT/$out"

  if test -n "${QUICKLY:-}"; then
    return
  fi

  write-summary-html PASSING "$@"
  write-summary-html DELTA-osh "$@"
  write-summary-html DELTA-bash "$@"

}

task-five "$@"
