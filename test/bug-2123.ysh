# Run with _bin/cxx-opt/ysh

proc filter (; predicate) {
  for line in (io.stdin) {
    if (io->evalExpr(predicate, vars={_val: fromJson8(line)})) {
      write -- $line
    }
  }
}

proc filter-continue (; predicate) {
  for line in (io.stdin) {
    # BUG FIX: we should GC before 'continue' raises an exception
    if (not io->evalExpr(predicate, vars={_val: fromJson8(line)})) {
      continue
    }
  }
}

#
# Setup
#

var f = '_tmp/b1'

# Using YSH numbers
var lines = ${1:-100_000}

for i in (0 ..= lines) {

  json write ({}, space=0)
} > $f

#
# Benchmarks
#

var N = 2

proc with-default {
  write -- u'get() with default\n'
  write -- 'BEFORE ------------------------------------------------------'

  for _ in (0 ..< N) {
    time for line in (io.stdin) {
      call fromJson8(line)
    } < $f
    write
  }

  echo 'FILTER with default'
  time filter [get(_val, 'missing-key', 0) === 0] < $f >/dev/null

  write -- 'AFTER -------------------------------------------------------'

  for _ in (0 ..< N) {
    time for line in (io.stdin) {
      call fromJson8(line)
    } < $f
    write
  }
}

proc without-default {
  write -- u'get() without default\n'
  write -- 'BEFORE ------------------------------------------------------'

  for _ in (0 ..< N) {
    time for line in (io.stdin) {
      call fromJson8(line)
    } < $f
    write
  }

  echo 'FILTER without default'

  for line in (io.stdin) {
    var d = fromJson8(line)
    call get(d, 'missing-key')
  } < $f

  #time filter [get(_val, 'missing-key', 0) === 0] < $f >/dev/null

  echo '****** BEGIN filter'
  #time filter [get(_val, 'missing-key')] < $f #>/dev/null
  time filter-continue [get(_val, 'missing-key')] < $f #>/dev/null
  echo '****** END filter'

  write -- 'AFTER -------------------------------------------------------'

  for _ in (0 ..< N) {
    time for line in (io.stdin) {
      call fromJson8(line)
    } < $f
    write
  }
}


with-default
without-default

