"""
build/NINJA_subgraph.py

Directory structure:

# These are the code generators.  Could nested like asdl/asdl_main too
_bin/
  shwrap/
    asdl_main
    mycpp_main
    lexer_gen
    ...

# These
_build/
  NINJA/  # part of the Ninja graph
    asdl.asdl_main/
      all-pairs.txt
      deps.txt

  gen/
    asdl/
      hnode.asdl.{cc,h}
    bin/
      osh_eval.mycpp.cc  -- suffix is the generator
    core/
      runtime.asdl.{cc,h}
      optview.gen.h
    frontend/
      syntax.asdl.{cc,h}
      types.asdl.h  # no .cc file
    mycpp/
      examples/
        expr_asdl.{cc,h}
        containers.mycpp.cc
        containers_raw.mycpp.cc
        containers.pea.cc
        containers_raw.pea.cc

# C code shared with the Python build
# eventually this can be moved into Ninja
_devbuild/
  gen/
    osh-lex.h
    osh-types.h
    id.h
    grammar_nt.h

    runtime_asdl.py

build/
  ninja-rules-py.sh
"""

from __future__ import print_function

import os
import subprocess
import sys

from build.ninja_lib import log


def shwrap_py(n, main_py, deps_base_dir='_build/NINJA', template='py'):
  rel_path, _ = os.path.splitext(main_py)
  py_module = rel_path.replace('/', '.')  # asdl/asdl_main.py -> asdl.asdl_main

  deps_path = os.path.join(deps_base_dir, py_module, 'deps.txt')
  with open(deps_path) as f:
    deps = [line.strip() for line in f]

  deps.remove(main_py)  # raises ValueError if it's not there

  basename = os.path.basename(rel_path)
  n.build('_bin/shwrap/%s' % basename, 'write-shwrap', [main_py] + deps,
          variables=[('template', template)])
  n.newline()


def NinjaGraph(ru):
  n = ru.n

  n.comment('Generated by %s' % __name__)
  n.newline()

  # Preprocess one translation unit
  n.rule('preprocess',
         # compile_one detects the _build/preprocessed path
         command='build/ninja-rules-cpp.sh compile_one $compiler $variant $more_cxx_flags $in $out',
         description='PP $compiler $variant $more_cxx_flags $in $out')
  n.newline()

  # Preprocess one translation unit
  n.rule('line_count',
         command='build/ninja-rules-cpp.sh line_count $out $in',
         description='line_count $out $in')
  n.newline()

  # Compile one translation unit
  n.rule('compile_one',
         command='build/ninja-rules-cpp.sh compile_one $compiler $variant $more_cxx_flags $in $out $out.d',
         depfile='$out.d',
         # no prefix since the compiler is the first arg
         description='$compiler $variant $more_cxx_flags $in $out')
  n.newline()

  # Link objects together
  n.rule('link',
         command='build/ninja-rules-cpp.sh link $compiler $variant $out $in',
         description='LINK $compiler $variant $out $in')
  n.newline()

  # 1 input and 2 outputs
  n.rule('strip',
         command='build/ninja-rules-cpp.sh strip_ $in $out',
         description='STRIP $in $out')
  n.newline()


  # Preprocess one translation unit
  n.rule('write-shwrap',
         # $in must start with main program
         command='build/ninja-rules-py.sh write-shwrap $template $out $in',
         description='make-pystub $out $in')
  n.newline()

  #
  # shwrap
  #

  # All the code generators from NINJA-config.sh
  #
  # TODO: could be moved into asdl/NINJA_subgraph.py, etc.
  shwrap_py(n, 'asdl/asdl_main.py')
  shwrap_py(n, 'core/optview_gen.py')
  shwrap_py(n, 'frontend/consts_gen.py')
  shwrap_py(n, 'frontend/flag_gen.py')
  shwrap_py(n, 'frontend/lexer_gen.py')
  shwrap_py(n, 'frontend/option_gen.py')
  shwrap_py(n, 'frontend/signal_gen.py')
  shwrap_py(n, 'oil_lang/grammar_gen.py')
  shwrap_py(n, 'osh/arith_parse_gen.py')

  shwrap_py(n, 'mycpp/mycpp_main.py',
            deps_base_dir='prebuilt/ninja',
            template='mycpp')

  shwrap_py(n, 'pea/pea_main.py',
            deps_base_dir='prebuilt/ninja',
            template='pea')

  #
  # ASDL
  #

  # TODO: can move these to frontend/ etc.
  ru.asdl_cc('frontend/syntax.asdl')
  ru.asdl_cc('frontend/types.asdl', pretty_print_methods=False)
  ru.asdl_cc('core/runtime.asdl')

  #
  # Other code generators
  #

  n.rule('consts-gen',
         command='_bin/shwrap/consts_gen $action $out_prefix',
         description='consts_gen $action $out_prefix')

  n.rule('flag-gen',
         command='_bin/shwrap/flag_gen $action $out_prefix',
         description='flag_gen $action $out_prefix')

  n.rule('option-gen',
         command='_bin/shwrap/option_gen $action $out_prefix',
         description='consts_gen $action $out_prefix')

  n.rule('optview-gen',
         # uses shell style
         command='_bin/shwrap/optview_gen > $out',
         description='optview_gen > $out')

  n.rule('arith-parse-gen',
         # uses shell style
         command='_bin/shwrap/arith_parse_gen > $out',
         description='arith-parse-gen > $out')

  prefix = '_gen/frontend/id_kind.asdl'
  n.build([prefix + '.h', prefix + '.cc'], 'consts-gen', [],
          implicit=['_bin/shwrap/consts_gen'],
          variables=[
            ('out_prefix', prefix),
            ('action', 'cpp'),
          ])
  n.newline()

  n.rule('signal-gen',
         command='_bin/shwrap/signal_gen $action $out_prefix',
         description='signal_gen $action $out_prefix')

  # Similar to above
  prefix = '_gen/frontend/consts'
  n.build([prefix + '.h', prefix + '.cc'], 'consts-gen', [],
          implicit=['_bin/shwrap/consts_gen'],
          variables=[
            ('out_prefix', prefix),
            ('action', 'cpp-consts'),
          ])
  n.newline()

  prefix = '_gen/frontend/arg_types'
  n.build([prefix + '.h', prefix + '.cc'], 'flag-gen', [],
          implicit=['_bin/shwrap/flag_gen'],
          variables=[
            ('out_prefix', prefix),
            ('action', 'cpp'),
          ])
  n.newline()

  prefix = '_gen/frontend/option.asdl'
  # no .cc file
  n.build([prefix + '.h'], 'option-gen', [],
          implicit=['_bin/shwrap/option_gen'],
          variables=[
            ('out_prefix', prefix),
            ('action', 'cpp'),
          ])
  n.newline()

  n.build(['_gen/core/optview.h'], 'optview-gen', [],
          implicit=['_bin/shwrap/optview_gen'])
  n.newline()

  n.build(['_gen/osh/arith_parse.cc'], 'arith-parse-gen', [],
          implicit=['_bin/shwrap/arith_parse_gen'])
  n.newline()

  prefix = '_gen/frontend/signal'
  n.build([prefix + '.h', prefix + '.cc'], 'signal-gen', [],
          implicit=['_bin/shwrap/signal_gen'],
          variables=[
            ('out_prefix', prefix),
            ('action', 'cpp'),
          ])
  n.newline()

