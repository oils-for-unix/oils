# Wedge definition for cmark
#
# Loaded by deps/wedge.sh.

set -o nounset
set -o pipefail
set -o errexit

# sourced
WEDGE_NAME='cmark'
WEDGE_VERSION='0.29.0'
WEDGE_IS_ABSOLUTE=1  # TODO: try relaxing

# 2025-04: cmake broke on a Github Actions Ubuntu image due to a minor version
# upgrade.  Somehow OLD versions break (are deprecated), not new ones.

# CMake Error at CMakeLists.txt:1 (cmake_minimum_required):
#  Compatibility with CMake < 3.5 has been removed from CMake.

# Let's redo the build system in shell, so that devs and the CI don't have a
# cmake dependency.
# This code is straight C99, building and executable and shared library.

# bin/
#   cmark  # executable
# lib/
#   libcmark.so -> libcmark.so.0.29.0
# share/     # Probably don't need these two dirs
# include/

# Copied from cmark-0.29.0/src/CMakeLists.txt

# We use the same variable names as CMake
LIBRARY='libcmark'
SOVERSION=$WEDGE_VERSION

# UNUSED
HEADERS='
  cmark.h
  parser.h
  buffer.h
  node.h
  iterator.h
  chunk.h
  references.h
  utf8.h
  scanners.h
  inlines.h
  houdini.h
  cmark_ctype.h
  render.h
'

# Removed scanners.re - that seems like a bug in the original
#   - scanners.c is the generated file
# Removed ${HEADERS} - they don't need to be compiled

#  scanners.re
LIBRARY_SOURCES="
  cmark.c
  node.c
  iterator.c
  blocks.c
  inlines.c
  scanners.c
  utf8.c
  buffer.c
  references.c
  render.c
  man.c
  xml.c
  html.c
  commonmark.c
  latex.c
  houdini_href_e.c
  houdini_html_e.c
  houdini_html_u.c
  cmark_ctype.c
"

PROGRAM_SOURCES="
  ${LIBRARY_SOURCES}
  main.c
"

# Here is an example from cmark-0.29.0/build/compile_commands.json
#
# "command": "/usr/bin/cc  -I/home/andy/git/oils-for-unix/oils/_build/deps-source/cmark/cmark-0.29.0/src/. -I/home/andy/git/oils-for-unix/oils/_build/deps-source/cmark/cmark-0.29.0/build/src  -Wall -Wextra -std=c99 -pedantic -O3 -DNDEBUG -DCMARK_STATIC_DEFINE -o CMakeFiles/cmark.dir/cmark.c.o -c /home/andy/git/oils-for-unix/oils/_build/deps-source/cmark/cmark-0.29.0/src/cmark.c",
#
# So let's just copy those flags for each source, and link them into a dynamic
# library.

CC_FLAGS='-Wall -Wextra -std=c99 -pedantic -O3 -DNDEBUG -DCMARK_STATIC_DEFINE'

DO_CMAKE_BUILD=''
#DO_CMAKE_BUILD=T


wedge-make() {
  local src_dir=$1
  local build_dir=$2
  local install_dir=$3
  local wedge_dir=$4

  # TODO: need $wedge_dir to access vendored cmark_export.h
  # This is generated by 
  #   generate_export_header(${LIBRARY} BASE_NAME ${PROJECT_NAME})
  # in src/CMakeLists.txt

  pushd $build_dir

  if test -z "$DO_CMAKE_BUILD"; then
    local obj_dir=$build_dir/obj
    local bin_dir=$build_dir/bin
    mkdir -v -p $obj_dir $bin_dir

    for c_src in $PROGRAM_SOURCES; do
      local obj=$obj_dir/$(basename $c_src).o
      echo "    CC $c_src"
      #echo cc -I "$src_dir/src" -I "$build_dir/src" $CC_FLAGS -o $obj -c $src_dir/src/$c_src

      # Note: $wedge_dir/cmark_{export,version}.h are copied from the cmake build
      cc -I "$src_dir/src" -I "$wedge_dir" $CC_FLAGS -o $obj -c $src_dir/src/$c_src
    done

    echo "  LINK $bin_dir/cmark"
    cc -o $bin_dir/cmark $obj_dir/*.o
  fi

  # Note: generated re2c source is included, so we don't have to invoke it

  #-o CMakeFiles/cmark.dir/cmark.c.o -c /home/andy/git/oils-for-unix/oils/_build/deps-source/cmark/cmark-0.29.0/src/cmark.c",

  if test -n "$DO_CMAKE_BUILD"; then
    time cmake -DCMAKE_INSTALL_PREFIX=$install_dir $src_dir
    time make
  fi

  # make test

  popd
}

wedge-install() {
  local build_dir=$1
  local install_dir=$2

  if test -z "$DO_CMAKE_BUILD"; then
    mkdir -v -p $install_dir/bin
    cp -v $build_dir/bin/cmark $install_dir/bin/cmark
  else
    pushd $build_dir
    time make install
    popd
  fi
}

wedge-smoke-test() {
  local install_dir=$1

  if test -z "$DO_CMAKE_BUILD"; then
    echo '*hi*' | $install_dir/bin/cmark
  else
    ldd $install_dir/lib/libcmark.so.$WEDGE_VERSION
  fi
}
