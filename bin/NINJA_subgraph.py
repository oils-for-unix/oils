"""
bin/NINJA_subgraph.py
"""
from __future__ import print_function

from glob import glob
from fnmatch import fnmatch

from build import ninja_lib
from build.ninja_lib import mycpp_binary, mycpp_library, main_cc, log

_ = log


def NinjaGraph(ru):
    n = ru.n

    ru.comment('Generated by %s' % __name__)

    #
    # Files embedded in binary
    #

    n.rule('embedded-file-gen',
           command='_bin/shwrap/embedded_file_gen $in > $out',
           description='embedded_file_gen $in $out')

    # Generated by build/py.sh all -> build/doc.sh all-help
    # I wish Ninja had DIRECTORY-level dependencies?  Because this should
    # ultimately depend on doc/ref/*.md
    # We could probably create a _build/ninja-stamp/HELP file and so forth
    files = glob('_devbuild/help/*')

    # OSH and YSH stdlib
    tmp = glob('stdlib/ysh/*.ysh') + glob('stdlib/osh/*.sh')

    # Remove this?
    tmp.extend(glob('stdlib/*.ysh'))

    # exclude test files
    for path in tmp:
        if fnmatch(path, '*-test.ysh'):
            continue
        if fnmatch(path, '*-test.sh'):
            continue
        if fnmatch(path, '*/draft-*'):
            continue

        files.append(path)

    # Make sure it's DETERMINISTIC
    files.sort()

    n.build(['_gen/bin/text_files.cc'],
            'embedded-file-gen',
            files,
            implicit=['_bin/shwrap/embedded_file_gen'])
    n.newline()

    ru.cc_library('//bin/text_files', srcs=['_gen/bin/text_files.cc'])

    #
    # Programs
    #

    hello_py_inputs = ninja_lib.TryDynamicDeps('bin/hello.py')

    # library //bin/hello.mycpp
    mycpp_library(
        ru,
        'bin/hello.py',
        py_inputs=hello_py_inputs,
        deps=['//mycpp/runtime_pure'],
    )
    mycpp_binary(ru,
                 '//bin/hello.mycpp',
                 template='win32',
                 matrix=ninja_lib.COMPILERS_VARIANTS)

    # library //bin/hello.mycpp-souffle
    mycpp_library(
        ru,
        'bin/hello.py',
        py_inputs=hello_py_inputs,
        translator='mycpp-souffle',
        deps=['//mycpp/runtime_pure'],
    )
    mycpp_binary(ru,
                 '//bin/hello.mycpp-souffle',
                 template='win32',
                 matrix=ninja_lib.COMPILERS_VARIANTS)

    # Use the stdlib
    mycpp_library(
        ru,
        'bin/hello_mylib.py',
        deps=['//mycpp/runtime'],
    )
    mycpp_binary(ru,
                 '//bin/hello_mylib.mycpp',
                 matrix=ninja_lib.COMPILERS_VARIANTS)

    oils_deps = [
        '//bin/text_files',
        '//cpp/core',
        '//cpp/data_lang',
        '//cpp/fanos',
        '//cpp/libc',
        '//cpp/osh',
        '//cpp/pgen2',
        '//cpp/pylib',
        '//cpp/stdlib',
        '//cpp/frontend_flag_spec',
        '//cpp/frontend_match',
        '//cpp/frontend_pyreadline',
        '//data_lang/nil8.asdl',
        '//display/pretty.asdl',
        '//frontend/arg_types',
        '//frontend/consts',
        '//frontend/help_meta',
        '//frontend/id_kind.asdl',
        '//frontend/option.asdl',
        '//frontend/signal',
        '//frontend/syntax.asdl',
        '//frontend/types.asdl',
        '//core/optview',
        '//core/runtime.asdl',
        '//core/value.asdl',
        '//osh/arith_parse',
        '//ysh/grammar',
        '//mycpp/runtime',
    ]

    oils_preamble = 'bin/oils_for_unix_preamble.h'

    mycpp_library(
        ru,
        'bin/osh_eval.py',
        py_inputs=ninja_lib.TryDynamicDeps('bin/osh_eval.py'),
        # TODO: use different preamble and deps
        preamble=oils_preamble,
        deps=oils_deps)

    mycpp_binary(ru,
                 '//bin/osh_eval.mycpp',
                 matrix=ninja_lib.COMPILERS_VARIANTS)

    mycpp_library(
        ru,
        'bin/osh_parse.py',
        py_inputs=ninja_lib.TryDynamicDeps('bin/osh_parse.py'),
        # TODO: use different preamble and deps
        preamble=oils_preamble,
        deps=oils_deps)

    mycpp_binary(ru,
                 '//bin/osh_parse.mycpp',
                 matrix=ninja_lib.COMPILERS_VARIANTS)

    oils_symlinks = ['osh', 'ysh']
    oils_matrix = (ninja_lib.COMPILERS_VARIANTS + ninja_lib.GC_PERF_VARIANTS +
                   ninja_lib.OTHER_VARIANTS)

    oils_py_inputs = ninja_lib.TryDynamicDeps('bin/oils_for_unix.py')

    # Main oils-for-unix binary
    mycpp_library(
        ru,
        'bin/oils_for_unix.py',
        py_inputs=oils_py_inputs,
        deps=oils_deps,
    )
    mycpp_binary(
        ru,
        '//bin/oils_for_unix.mycpp',
        matrix=oils_matrix,
        # _bin/cxx-opt/oils-for-unix, NOT _bin/cxx-opt/bin/oils-for-unix
        bin_path='oils-for-unix',
        symlinks=oils_symlinks,
        preprocessed=True,
    )

    # Faster variant
    mycpp_library(
        ru,
        'bin/oils_for_unix.py',
        py_inputs=oils_py_inputs,
        translator='mycpp-souffle',
        deps=oils_deps,
    )
    mycpp_binary(
        ru,
        '//bin/oils_for_unix.mycpp-souffle',
        matrix=oils_matrix,
        bin_path='mycpp-souffle/oils-for-unix',
        symlinks=oils_symlinks,
    )
