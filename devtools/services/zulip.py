#!/usr/bin/env python3
"""
Convert Zulip-flavored markdown to CommonMark.

Usage:
    devtools/services/zulip.py < input.md > output.md

NOTE: This tool and its tests were mostly generated by Claude Code, using a
"scaffold" I set up with devtools/services/zulip.sh.

Converts Zulip-specific syntax to standard markdown:
- #**stream>topic** -> [#stream > topic](https://oilshell.zulipchat.com/#narrow/channel/ID-stream/topic/TOPIC)
- #**stream** -> [#stream](https://oilshell.zulipchat.com/#narrow/channel/ID-stream)
- https://example.com -> <https://example.com> (for CommonMark auto-linking)

Generates proper Zulip URLs with:
- Correct channel IDs for known streams
- Zulip-style URL encoding (.20 for space, .27 for apostrophe, etc.)
- Full domain URLs that work outside of Zulip
"""

import sys
import re

# Stream name to ID mapping extracted from Zulip
STREAM_MAP = {
    'oil-dev': '121539',
    'oil-discuss': '121540',
    'blog-ideas': '266575',
    'containers': '308821',
    'performance': '384167',
    'language-design': '384942',
    'blog-comments': '392989',
    'shell-runtime': '429356',
    'projects-with-oils': '452107',
    'osh': '502349',
    'distros': '522730',
}


def zulip_encode_topic(topic):
    """Encode topic using Zulip's specific encoding pattern (.XX instead of %XX)."""
    result = ''
    for char in topic:
        if char.isalnum() or char == '-':
            result += char
        else:
            # Convert to hex and replace % with . (like Zulip does)
            hex_code = f'{ord(char):02X}'
            result += f'.{hex_code}'
    return result


# Convert stream/topic links: #**stream>topic** -> proper Zulip URL
def replace_stream_topic(match):
    content = match.group(1)  # Everything between #** and **

    if '>' in content:
        # Parse stream and topic
        stream, topic = content.split('>', 1)
        stream = stream.strip()
        topic = topic.strip()

        # Get stream ID, fallback to 0 if not found
        stream_id = STREAM_MAP.get(stream, '0')

        # Encode the topic using Zulip's format
        topic_encoded = zulip_encode_topic(topic)

        # Construct the Zulip URL (omitting /with/message_id as requested)
        url = f'https://oilshell.zulipchat.com/#narrow/channel/{stream_id}-{stream}/topic/{topic_encoded}'

        # Render with proper spacing around >
        display_text = f'{stream} > {topic}'
        return f'[#{display_text}]({url})'
    else:
        # Stream-only reference
        stream = content.strip()
        stream_id = STREAM_MAP.get(stream, '0')
        url = f'https://oilshell.zulipchat.com/#narrow/channel/{stream_id}-{stream}'
        return f'[#{stream}]({url})'


# Convert Zulip stream/topic links
stream_topic_pattern = re.compile(
    r'''
    \#\*\*          # Match #**
    ([^*]+)         # Capture everything between the ** (stream>topic or just stream)
    \*\*            # Match closing **
''', re.VERBOSE)


# Convert bare URLs to auto-linkable format for CommonMark
# Match URLs that aren't already in markdown links or angle brackets
def replace_bare_url(match):
    url = match.group(0)
    return f'<{url}>'


# Convert bare URLs to auto-linkable format
bare_url_pattern = re.compile(
    r'''
    (?<![(<])           # Negative lookbehind: not preceded by ( or <
    (https?://          # Capture group: http:// or https://
     [^\s)>]+           # Followed by non-whitespace, non-), non-> chars
    )                   # End capture group
    (?![)>])            # Negative lookahead: not followed by ) or >
''', re.VERBOSE)


def convert_zulip_to_commonmark(content):
    """Convert Zulip-flavored markdown to CommonMark."""

    content = stream_topic_pattern.sub(replace_stream_topic, content)

    content = bare_url_pattern.sub(replace_bare_url, content)

    return content


def main():
    content = sys.stdin.read()
    converted = convert_zulip_to_commonmark(content)
    sys.stdout.write(converted)


if __name__ == '__main__':
    main()
