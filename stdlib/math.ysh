

# We recommend abs(float1 - float2) < 0.0001
# instead of exact float equality

# This causes a name collision with `abs`. The rename is a work around for now.
func abs_(x) {
  if (x < 0) {
    return (-x)
  } else {
    return (x)
  }
}


# How to implement Python-like max in YSH?

# max(5,6)  => 6

# max([5,6,7])  => 7

# max(5,6,7,8)  => 8  - I don't like this about Python

func mymax (...args) {
  # Could also write this
  # case (len(args)) {
  #   (0) { error }
  #   (1) {
  #     ...
  #   }
  #   (2) {
  #     ...
  #   }
  #   (else) { error }
  # }

  if (len(args) === 0) {
    error ('Requires 1 arg')

  } elif (len(args) === 1) {
    # assert List

    var mylist = args[0]

    var max = mylist[0]

    # Could be this, but it's wasteful
    #for item in (mylist[1:]) {

    for item in (mylist) {
      if (item > max) {
        setvar max = item
      }
    }

    # ALTERNATIVE
    for item in (range(1, len(args))) {
      echo
    }

    # COULD BE an iterator
    for i in ( 1 : len(args) ) {
      var item = args[i]
    }

  } elif (len(args) === 2) {
    if (args[0] >= args[1]) {
      echo TODO
      # return (args[0])
    } else {
      echo TODO
      # return (args[1])
    }

  } else {
    # max( 1, 2, 3) doesn't work in YSH, but does in Python
    error ('too many')
  }
}
