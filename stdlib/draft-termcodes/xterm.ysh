#!/usr/bin/env ysh

module stdlib/termcodes || return 0

# NOTE: Reference
# - https://en.wikipedia.org/wiki/ANSI_escape_code#C0_control_codes
# - https://invisible-island.net/xterm/ctlseqs/ctlseqs.html

const TERM_BEL = u'\u{07}'
const TERM_BS  = u'\u{08}'
const TERM_HT  = u'\u{09}'
const TERM_LF  = u'\u{0A}'
const TERM_FF  = u'\u{0C}'
const TERM_CR  = u'\u{0D}'
const TERM_ESC = u'\u{1B}'
const TERM_CSI = "$TERM_ESC["

func srgRgb(r, g, b) {
  var channelName = ['Red', 'Green', 'Blue']
  for channel in $r $g $b {
    if (channel < 0 or channel > 255) {
      echo Channel $channelName has value $channel which is out of range of [0, 255].
      exit 1
    }
  }
  return ("2;$r;$g;$b")
}

# 0 ~ 7: Black, Red, Green, Yellow, Blue, Magenta, Cyan, White, 
# 8 ~ 15: Bright Black (Gray), Bright Red, Bright Green, Bright Yellow, Bright Blue, Bright Magenta, Bright Cyan, Bright White
func sgr4(color_id) {
  if (color_id > 0xF or color_id < 0) {
    echo Color $color_id is out of range of 4-bit colors
    exit 1
  }
  return ([color_id])
}

func sgr8(color_id) {
  if (color_id > 0xFF or color_id < 0) {
    echo Color $color_id is out of range of 8-bit colors
    exit 1
  }
  return ("5;$color_id")
}

func sgr24(color_hex) {
  if (color_hex > 0xFFFFFF or color_hex < 0) {
    echo Color $colorHex is out of range of 24-bit true colors
    exit 1
  }
  var r = (color_hex >> 16)
  var g = (color_hex >> 8) & 0xFF
  var b = color_hex & 0xFF
  return ("2;$r;$g;$b")
}

func withFg(text, color) {
  if (type(color) === 'Str') {
    return ("${TERM_CSI}38;${color}m${text}${TERM_CSI}m")
  } else { # 4-bit color
    var sgr4_id = color[0]
    if (sgr4_id < 8) {
      setvar sgr4_id += 30
    } else {
      setvar sgr4_id += 90 - 8
    }
    return ("${TERM_CSI}${sgr4_id}m${text}${TERM_CSI}m")
  }
}

func withBg(text, color) {
  if (type(color) === 'Str') {
    return ("${TERM_CSI}48;${color}m${text}${TERM_CSI}m")
  } else { # 4-bit color
    var sgr4_id = color[0]
    if (sgr4_id < 8) {
      setvar sgr4_id += 40
    } else {
      setvar sgr4_id += 100 - 8
    }
    return ("${TERM_CSI};${sgr4_id}m${text}${TERM_CSI}m")
  }
}

const STYLE_NORMAL            = 0
const STYLE_BOLD              = 1
const STYLE_FAINT             = 2
const STYLE_ITALICIZED        = 3
const STYLE_UNDERLINED        = 4
const STYLE_BLINK             = 5
const STYLE_INVERSE           = 7
const STYLE_INVISIBLE         = 8
const STYLE_CROSSED_OUT       = 9
const STYLE_DOUBLY_UNDERLINED = 21

# TODO: 
# - What exaclty does 22 do? 
# - The following doesn't seem to work as expected because they alter the style from that point on and there's no way to revert them.

# const FONT_NOT_ITALICIZED    = 23
# const FONT_NOT_UNDERLINED    = 24
# const FONT_NOT_BLINK         = 25
# const FONT_NOT_INVERSE       = 27
# const FONT_NOT_INVISIBLE     = 28
# const FONT_NOT_CROSSED_OUT   = 29

func withStyle(text, style) {
  return ("${TERM_CSI}${style}m${text}${TERM_CSI}m")
}

func withLink(caption, address) {
  return ("$TERM_ESC]8;;$address$TERM_ESC\\$caption$TERM_ESC]8;;$TERM_ESC\\")
}

proc bell() {
  write -n $TERM_BEL
}

# TODO: use some language constructs to generate these biolerplates
proc cursor-up(; n) { # CUU
  write -n "${TERM_CSI}${n}A"
}

proc cursor-down(; n) { # CUD
  write -n "${TERM_CSI}${n}B"
}

proc cursor-forward(; n) { # CUF
  write -n "${TERM_CSI}${n}C"
}

proc cursor-back(; n) { # CUB
  write -n "${TERM_CSI}${n}D"
}

proc cursor-next-line(; n) { # CNL
  write -n "${TERM_CSI}${n}E"
}

proc cursor-previous-line(; n) { # CPL
  write -n "${TERM_CSI}${n}F"
}

proc cursor-horizontal-absolute(; n) { # CHA
  write -n "${TERM_CSI}${n}G"
}

proc cursor-position(; row, col) { # CUP
  write -n "$TERM_CSI$row;${col}H"
}

# NOTE: Clears part of the screen. If n is 0 (or missing), clear from cursor to end of screen. If n is 1, clear from cursor to beginning of the screen. If n is 2, clear entire screen (and moves cursor to upper left on DOS ANSI.SYS). If n is 3, clear entire screen and delete all lines saved in the scrollback buffer (this feature was added for xterm and is supported by other terminal applications).
proc erase-in-display(; n) { # ED
  write -n "$TERM_CSI${n}J"
}

# NOTE: Erases part of the line. If n is 0 (or missing), clear from cursor to the end of the line. If n is 1, clear from cursor to beginning of the line. If n is 2, clear entire line. Cursor position does not change.
proc erase-in-line(; n) { # EL
  write -n "$TERM_CSI${n}K"
}
