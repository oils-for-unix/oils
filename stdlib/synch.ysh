#!/usr/bin/env ysh

module stdlib/synch || return 0

#################
### Semaphore ###
#################

func semaNew(value) {
   # WARN: this section should be critical but for now it's not
  #====================
  var sema = $(mktemp -u)
  mkfifo $sema
  #====================
  call semaUp(sema, delta = value)
  return (sema)
}

func semaDown(sema) {
  cat $sema > /dev/null
}

func semaUp(sema; delta = 1) {
  {
    for _ in (0 .. delta) {
      echo 1 > $sema
    }
  } &
}

func semaDestroy(sema) {
  rm $sema
}

# NOTE: all synchronization primitives except semaphore is implementation agnostic, meaning we may replace another implementation for semaphore in the future and all other synchronization primitives still work

#############
### Mutex ###
#############

func mutexNew() {
  var mutex = semaNew(1)
  return (mutex)
} 

func mutexAcquire(mutex) {
  call semaDown(mutex)
}

func mutexRelease(mutex) {
  call semaUp(mutex)
}

func mutexDestroy(mutex) {
  call semaDestroy(mutex)
}

################
### JobQueue ###
################
## A queue that have producers and consumers
func jobQueueNew(...jobs) {
  var mutex = semaNew(1)
  var full = semaNew(0)
  var queue = {
    internal: jobs,
    mutex: mutex,
    full: full
  }
  return (queue)
}

func jobQueueProduce(queue, job) {
  call mutexAcquire(queue.mutex)
  call queue->append(job)
  call semaUp(queue.full)
  call mutexRelease(queue.mutex)
}

func jobQueueConsume(queue) {
  call mutexAcquire(queue.mutex)
  call semaDown(queue.full)
  # NOTE: since we semaDown, queue can't be empty
  var ret = queue->pop(job)
  call mutexRelease(queue.mutex)
  return (ret)
}

# TODO: Channels, RWLocks.
