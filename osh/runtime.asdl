-- Data types for evaluating the syntax tree

module runtime
{
  builtin = 
    NONE | TIMES | READ | ECHO | PRINTF | SHIFT
  | CD | PWD | PUSHD | POPD | DIRS
  | EXPORT | READONLY | LOCAL | DECLARE | TYPESET 
  | UNSET | SET | SHOPT
  | TRAP | UMASK
  | SOURCE | DOT | EVAL | EXEC | WAIT | JOBS | FG | BG
  | COMPLETE | COMPGEN | COMPOPT | COMPADJUST
  | TRUE | FALSE
  | COLON
  | TEST | BRACKET | GETOPTS
  | COMMAND | TYPE | HASH | HELP | HISTORY
  | BUILTIN
  | ALIAS | UNALIAS
  -- Oil
  | PUSH | APPEND 
  | WRITE | GETLINE | JSON 
  | REPR | USE | OPTS
  | ENV | FORK 

  -- Evaluating SimpleCommand results in either an argv array or an assignment.
  -- in 'local foo', rval is None
  assign_arg = (lvalue lval, value? rval, int spid)

  -- ASDL issue: I need to import the 'command' type from frontend/syntax.asdl!
  cmd_value =
    Argv(string* argv, int* arg_spids, any? block)
  | Assign(builtin builtin_id,
           string* argv, int* arg_spids,
           assign_arg* pairs)

  -- TODO: Remove arg_vector in favor of cmd_value.Argv.
  -- The spids array is parallel to strs, the argv values.  Note that each
  -- entry in argv came from a single word, but a word can produce multiple
  -- argv entries.
  -- 'rhs' is for assignment builtins.
  arg_vector = (string* strs, int* spids)

  -- A parse-time word_part from syntax.asdl is evaluated to a runtime
  -- part_value.
  part_value = 

    -- * Single or double quoted parts get neither split or globbed.
    -- * Bare words like echo or *.py are globbed, but NOT split with IFS.
    -- * Unquoted Substitutions are split and globbed.
    String(string s, bool quoted, bool do_split)

    -- "$@" or "${a[@]}" -- never globbed or split (though other shells
    -- split them)
  | Array(string* strs)

  -- A static word from osh.asdl is evaluted to a dynamic value.  value
  -- instances are stored in state.Mem().
  value =
    -- An Undef value is different than "no binding" because of dynamic scope.
    Undef
  | Str(string s)
    -- "holes" in the array are represented by None
  | MaybeStrArray(string* strs)
    -- d will be a dict
  | AssocArray(any d)
    -- A Python-style object.  'any' is not currently type checked.
    -- invariant for 'proc' stack:
    -- * s bool, int, float, (NOT str), or...
    -- * BoolArray, IntArray, FloatArray (NOT StrArray), or ...
    -- * heterogeneous List (NOT dict)
    -- * or a user-defined type
  | Obj(any obj)

  -- For storing a variable.
  -- TODO:
  -- * add spid for last-assigned location
  -- * use a bitfield for flags.
  cell = (value val, bool exported, bool readonly)

  -- An undefined variable can become an indexed array with s[x]=1.  But if we
  -- 'declare -A' it, it will be undefined and waiting to turn into an
  -- associative array.
  var_flags = Exported | ReadOnly
  scope = LocalOnly | GlobalOnly | Dynamic

  -- For OSH assignment, evaluated from osh_ast.lhs_expr
  -- TODO: Rename this to sh_place?
  lvalue = 
    Named(string name)
  | Indexed(string name, int index)
  | Keyed(string name, string key)

    -- Oil variants
  | ObjIndex(any obj, any index)
  | ObjAttr(any obj, string attr)
  attributes (int* spids)

  -- evaluated version of syntax.redir
  redirect = 
    Path(id op_id, int fd, string filename, int op_spid)
  | FileDesc(id op_id, int fd, int target_fd, int op_spid)
    -- here doc or here word
  | HereDoc(int fd, string body, int op_spid)

  -- NOTE: not used right now, isinstance() check works fine
  job_status =
    Process(int status)
  | Pipeline(int* statuses)

  -- For word splitting in legacy.py
  span = Black | Delim | Backslash
  emit = Part | Delim | Empty | Escape | Nothing
  state = Invalid | Start | DE_White1 | DE_Gray | DE_White2 | Black | Backslash

  -- Edges are characters.  DE_ is the delimiter prefix.  DE_White is for
  -- whitespace; DE_Gray is for other IFS chars; Black is for significant
  -- characters.
  char_kind = DE_White | DE_Gray | Black | Backslash

  -- word_eval.py: SliceParts is for ${a-} and ${a+}, Error is for ${a?}, and
  -- SliceAndAssign is for ${a=}.
  effect = SpliceParts | Error | SpliceAndAssign | NoOp

  -- core/process.py
  -- A Job is a Process or Pipeline.
  -- * Proceses usually go from Running to Stopped, unless unless Ctrl-Z stops
  --   them.
  -- * Pipelines go Running to Done.  They are never stopped; only the processes
  --   inside them are stopped.
  job_state = Running | Done | Stopped

  -- tools/osh2oil.py
  word_style = Expr | Unquoted | DQ | SQ
}
