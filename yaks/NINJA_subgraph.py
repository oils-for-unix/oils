"""
yaks/NINJA_subgraph.py
"""
from __future__ import print_function

from build import ninja_lib
from build.ninja_lib import log, COMPILERS_VARIANTS

_ = log

# TODO: should have dependencies with sh_binary
RULES_PY = 'build/ninja-rules-py.sh'


def NinjaGraph(ru):
    n = ru.n

    ru.comment('Generated by %s' % __name__)

    ru.asdl_library('yaks/yaks.asdl')

    ru.cc_binary('yaks/yaks_runtime_test.cc',
                 deps=['//mycpp/runtime'],
                 matrix=COMPILERS_VARIANTS)

    # yaks compiler
    main_name = 'yaks_main'
    with open('_build/NINJA/yaks.%s/translate.txt' % main_name) as f:
        deps = [line.strip() for line in f]

    prefix = '_gen/yaks/%s.mycpp' % main_name
    outputs = [prefix + '.cc', prefix + '.h']
    n.build(outputs,
            'gen-oils-for-unix',
            deps,
            implicit=['_bin/shwrap/mycpp_main', RULES_PY],
            variables=[('out_prefix', prefix), ('main_name', main_name),
                       ('translator', 'yaks'), ('preamble', 'yaks/preamble.h')])

    ru.cc_binary(
        '_gen/yaks/%s.mycpp.cc' % main_name,
        # Note: yaks/yaks.py is bad for Python imports, so it's called
        # yaks_main.py
        # yaks overlaps with the directory _bin/cxx-opt/yaks/examples
        #bin_path='yaks_main',
        preprocessed=True,
        matrix=ninja_lib.COMPILERS_VARIANTS + ninja_lib.GC_PERF_VARIANTS,
        deps=[
            '//core/optview',  # TODO: remove this dep
            '//core/runtime.asdl',
            '//core/value.asdl',
            '//cpp/data_lang',
            '//cpp/frontend_match',
            '//data_lang/nil8.asdl',
            '//frontend/consts',
            '//mycpp/runtime',
            '//yaks/yaks.asdl',
        ])

    ### Custom yaks translation
    n.newline()

    n.rule('yaks',
           command='_bin/cxx-opt/yaks/yaks_main.mycpp cpp $in > $out',
           description='yaks cpp $in > $out')
    n.newline()

    raw_cc = '_gen/yaks/examples/hello_raw.yaks.cc'
    example_cc = '_gen/yaks/examples/hello.yaks.cc'

    n.build(
        [raw_cc],
        'yaks',
        ['yaks/examples/hello.yaks'],
        implicit=['_bin/cxx-opt/yaks/yaks_main.mycpp'],
    )
    n.newline()

    n.build([example_cc],
            'wrap-cc', [raw_cc],
            implicit=[RULES_PY],
            variables=[('name', 'hello'), ('preamble_path', '""'),
                       ('translator', 'yaks')])
    n.newline()

    ru.cc_binary(
        example_cc,
        matrix=ninja_lib.COMPILERS_VARIANTS + ninja_lib.GC_PERF_VARIANTS,
        deps=['//mycpp/runtime'],
    )


# vim: sw=4
