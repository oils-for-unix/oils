"""
cpp/NINJA_subgraph.py
"""

from __future__ import print_function

from build import ninja_lib
from build.ninja_lib import log

# Some tests use #ifndef CPP_UNIT_TEST to disable circular dependencies on
# generated code
CPP_UNIT = [
  ('cxx', 'dbg', '-D CPP_UNIT_TEST'),
  ('cxx', 'asan', '-D CPP_UNIT_TEST'),
  ('clang', 'coverage', '-D CPP_UNIT_TEST'),
]

def NinjaGraph(ru):
  ru.comment('Generated by %s' % __name__)

  ru.cc_library(
      '//cpp/leaky_core', 
      srcs = ['cpp/leaky_core.cc'],
      deps = ['//frontend/syntax.asdl'],
  )

  # doesn't run with GC
  ru.cc_binary(
      'cpp/leaky_core_test.cc',
      deps = [
        '//cpp/leaky_core',
        '//mycpp/runtime',
        ],
      matrix = CPP_UNIT)

  ru.cc_binary(
      'cpp/core_test.cc',
      deps = [
        '//cpp/leaky_core',
        '//mycpp/runtime',
        ],
      matrix = ninja_lib.COMPILERS_VARIANTS)

  ru.cc_binary(
      'cpp/data_race_test.cc',
      deps = [
        '//cpp/leaky_core',
        '//mycpp/runtime',
        ],
      matrix = ninja_lib.SMALL_TEST_MATRIX + [
        ('cxx', 'tsan'),
        ('clang', 'tsan'),
      ])

  ru.cc_library(
      '//cpp/leaky_bindings', 
      # TODO: could split these up more
      srcs = [
        'cpp/leaky_frontend_flag_spec.cc',
        'cpp/leaky_frontend_match.cc',
        'cpp/leaky_frontend_tdop.cc',
        'cpp/leaky_osh.cc',
        'cpp/leaky_pgen2.cc',
        'cpp/leaky_pylib.cc',
        'cpp/leaky_stdlib.cc',
        'cpp/leaky_libc.cc',
      ],
      deps = [
        '//core/runtime.asdl',
        '//frontend/arg_types',
        '//frontend/syntax.asdl',
        '//frontend/types.asdl',  # leaky_frontend_match.cc uses it
      ],
  )

  ru.cc_binary(
      'cpp/leaky_binding_test.cc',
      deps = [
        '//cpp/leaky_bindings',
        '//cpp/leaky_core',  # could remove this
        '//mycpp/runtime',
        ],
      matrix = ninja_lib.COMPILERS_VARIANTS)

  ru.cc_binary(
      'cpp/gc_binding_test.cc',
      deps = [
        '//cpp/leaky_bindings',
        '//frontend/arg_types',  # is it necessary?
        '//mycpp/runtime',
        ],
      matrix = ninja_lib.COMPILERS_VARIANTS)

  ru.cc_binary(
      'cpp/leaky_flag_spec_test.cc',

      deps = [
        '//cpp/leaky_bindings',  # TODO: It only needs cpp/leaky_frontend_flag_spec.cc
        '//frontend/arg_types',
        '//mycpp/runtime',
        ],
      matrix = CPP_UNIT)
